// https://patorjk.com/software/taag/#p=display&f=ANSI%20Shadow&t=Type%20Something%20//
// ANSI SHADOW
#include "aart.hpp"
#include "utf.hpp"
#ifdef DEBUGGING
#include <iostream>
#endif

#define CHAR_ALPHA 26
#define CHAR_NUM 10
#define CHAR_SPACE 1
#define CHAR_X (CHAR_ALPHA+CHAR_NUM+CHAR_SPACE)
//                        {a,b,c,d,e,f,g,h,i,j,k,l,m ,n ,o,p,q,r,s,t,u,v, w, x,y,z,0,1,2,3,4,5,6,7,8,9, }
int alphabet_sz[CHAR_X] = {8,8,8,8,8,8,9,8,3,8,8,8,11,10,9,8,9,8,8,9,9,9,10, 9,9,8,9,4,8,8,8,8,9,8,8,8,1};
static std::vector<std::string> alphabet = 
{" █████╗ ","██████╗ "," ██████╗","██████╗ ","███████╗","███████╗"," ██████╗ ","██╗  ██╗","██╗","     ██╗","██╗  ██╗","██╗     ","███╗   ███╗","███╗   ██╗"," ██████╗ ","██████╗ "," ██████╗ ","██████╗ ","███████╗","████████╗","██╗   ██╗","██╗   ██╗","██╗    ██╗","██╗  ██╗","██╗   ██╗","███████╗"," ██████╗ "," ██╗","██████╗ ","██████╗ ","██╗  ██╗","███████╗"," ██████╗ ","███████╗"," █████╗ "," █████╗ "," ",
 "██╔══██╗","██╔══██╗","██╔════╝","██╔══██╗","██╔════╝","██╔════╝","██╔════╝ ","██║  ██║","██║","     ██║","██║ ██╔╝","██║     ","████╗ ████║","████╗  ██║","██╔═══██╗","██╔══██╗","██╔═══██╗","██╔══██╗","██╔════╝","╚══██╔══╝","██║   ██║","██║   ██║","██║    ██║","╚██╗██╔╝","╚██╗ ██╔╝","╚══███╔╝","██╔═████╗","███║","╚════██╗","╚════██╗","██║  ██║","██╔════╝","██╔════╝ ","╚════██║","██╔══██╗","██╔══██╗"," ",
 "███████║","██████╔╝","██║     ","██║  ██║","█████╗  ","█████╗  ","██║  ███╗","███████║","██║","     ██║","█████╔╝ ","██║     ","██╔████╔██║","██╔██╗ ██║","██║   ██║","██████╔╝","██║   ██║","██████╔╝","███████╗","   ██║   ","██║   ██║","██║   ██║","██║ █╗ ██║"," ╚███╔╝ "," ╚████╔╝ ","  ███╔╝ ","██║██╔██║","╚██║"," █████╔╝"," █████╔╝","███████║","███████╗","███████╗ ","    ██╔╝","╚█████╔╝","╚██████║"," ",
 "██╔══██║","██╔══██╗","██║     ","██║  ██║","██╔══╝  ","██╔══╝  ","██║   ██║","██╔══██║","██║","██   ██║","██╔═██╗ ","██║     ","██║╚██╔╝██║","██║╚██╗██║","██║   ██║","██╔═══╝ ","██║▄▄ ██║","██╔══██╗","╚════██║","   ██║   ","██║   ██║","╚██╗ ██╔╝","██║███╗██║"," ██╔██╗ ","  ╚██╔╝  "," ███╔╝  ","████╔╝██║"," ██║","██╔═══╝ "," ╚═══██╗","╚════██║","╚════██║","██╔═══██╗","   ██╔╝ ","██╔══██╗"," ╚═══██║"," ",
 "██║  ██║","██████╔╝","╚██████╗","██████╔╝","███████╗","██║     ","╚██████╔╝","██║  ██║","██║","╚█████╔╝","██║  ██╗","███████╗","██║ ╚═╝ ██║","██║ ╚████║","╚██████╔╝","██║     ","╚██████╔╝","██║  ██║","███████║","   ██║   ","╚██████╔╝"," ╚████╔╝ ","╚███╔███╔╝","██╔╝ ██╗","   ██║   ","███████╗","╚██████╔╝"," ██║","███████╗","██████╔╝","     ██║","███████║","╚██████╔╝","   ██║  ","╚█████╔╝"," █████╔╝"," ",
 "╚═╝  ╚═╝","╚═════╝ "," ╚═════╝","╚═════╝ ","╚══════╝","╚═╝     "," ╚═════╝ ","╚═╝  ╚═╝","╚═╝"," ╚════╝ ","╚═╝  ╚═╝","╚══════╝","╚═╝     ╚═╝","╚═╝  ╚═══╝"," ╚═════╝ ","╚═╝     "," ╚══▀▀═╝ ","╚═╝  ╚═╝","╚══════╝","   ╚═╝   "," ╚═════╝ ","  ╚═══╝  "," ╚══╝╚══╝ ","╚═╝  ╚═╝","   ╚═╝   ","╚══════╝"," ╚═════╝ "," ╚═╝","╚══════╝","╚═════╝ ","     ╚═╝","╚══════╝"," ╚═════╝ ","   ╚═╝  "," ╚════╝ "," ╚════╝ "," "};

int AART::get_char_idx(char c)
{
    uint8_t char_idx = 0;
    if      (c>='a' && c<='z') char_idx = c-'a';
    else if (c>='A' && c<='Z') char_idx = c-'A';
    else if (c>='0' && c<='9') char_idx = c-'0'+CHAR_ALPHA;
    else if (c==' ') char_idx = CHAR_ALPHA+CHAR_NUM;
    else return -1;
    return char_idx;
}
int AART::size(){
    #if 0
    int ret = 0;
    for(char& c: txt){
        int tmp = alphabet_sz[get_char_idx(c)];
        if(tmp > 0) 
            ret += tmp;
    }
    return ret;
    #else
    return utf::u32string_size(vs.front());
    #endif
}
AART::AART(char c)
{
    txt += c;
    int ci = get_char_idx(c);
    if(ci < 0) return;
    for (int i = 0; i < AART_CHAR_H; i++) vs[i] = alphabet[ci + CHAR_X*i];
}
AART::AART(std::string s)
{
    txt = s;
    for (char& c : s)
        *this += AART(c);
}


#ifdef DEBUGGING
int main(int argc, char* argv[]) {
    if (argc < 2) {
        std::cerr << "Usage: " << argv[0] << " <text>" << std::endl;
        return 1;
    }

    std::string txt = argv[1];
    std::cout << txt << std::endl;
    AART in(txt);
    AART c('A');

    for (const auto& line : in.vs)
        std::cout << line << std::endl;
    return 0;
}
#endif